2017-08-04
1. 修改了.I和.y，增加了null new [ ] 关键字及数组相关语法

2017-05-24
1. 优化了else if的语法结构，使其更像C语言

2017-05-20
1. 实现多线程运行

2017-05-19
1. 解决运行完脚本仍然有literal pool未释放的问题

2017-05-19
1. 解决累加打印问题，每次执行一次脚本前清空打印文件内容

2017-05-18
1. 修复了关键字拼写错误els if改成else if

2017-05-18
1. 修复了所有存在的问题，能够单线程循环跑
   Debug/Release都进行了测试

2017-05-18
1. 修复内存回收Bug

2017-05-17
1. 修复内存回收Bug

2017-05-16
1. 修复ExpressionToString函数Bug

2017-05-16
1. 使用测试用例进行测试
   发现低级错误引起的异常释放内存

2017-05-16
1. 对整体进行了调试
下一步计划：使用测试用例进行测试

2017-09-15
1. 实现Execute类的所有函数
下一步计划：调试DikSam虚拟机

2017-05-14
1. 实现Execute类函数
下一步计划：继续实现Execute类函数

2017-05-13
1. 实现Execute类函数
下一步计划：继续实现Execute类函数

2017-05-12
1. 调试了程序，使之能够正常运行
下一步计划：继续实现Execute类函数

2017-05-12
1. 实现了部分Execute类函数
下一步计划：继续实现Execute类函数

2017-05-11
1. 实现了垃圾回收类
2. 实现了部分Execute类函数
下一步计划：继续实现Execute类函数

2017-05-09
1. 修复了Generate对于逗号表达式的处理

2017-05-08
1. 修复了部分Generate对于逗号表达式的处理

2017-05-05
1. 修复了Memory::StrDUP函数内存越界的Bug

2017-05-03
1. 修复逗号表达式表达式的类型bug

2017-05-02
1. 修复comma表达式语法不支持bug

2017-05-02
1. 解Bug：memory模块的realloc功能存在内存越界的问题

2017-04-28
1. 上次修改了词法分析器、语法分析器，去掉关键字void
   发现git上没提交成功，重新提交

2017-04-27
1. 调试Generate功能
下一步计划：进一步调试Generate功能

2017-04-27
1. 实现Generate全部函数
下一步计划：调试Generate功能

2017-04-26
1. 实现Generate部分函数
下一步计划：实现Generate部分函数

2017-04-26
1. 实现Generate部分函数
下一步计划：实现Generate部分函数

2017-04-25
1. 实现Generate部分函数
下一步计划：实现Generate部分函数

2017-04-24
1. 完成类DVMOpcodeInfo
下一步计划：实现Generate部分函数

2017-04-23
1. 实现枚举类型DVM_Opcode
下一步计划：实现Generate部分函数

2017-04-21
1. 实现Generate部分函数
下一步计划：实现Generate部分函数

2017-04-20
1. 还原词法分析器、语法分析器，去掉void关键字
   因为DikSam0.3版本将会支持void关键字
下一步计划：实现Generate部分函数

2017-04-20
1. 实现Generate部分函数
2. 构建执行子框架
下一步计划：实现Generate部分函数

2017-04-19
1. 改写词法分析器及语法分析器，增加函数定义式返回void类型
2. 解决了yyparse失败后，无法释放互斥锁的问题
下一步计划：实现Generate功能

2017-04-18
1. 对导出函数进行了微调

2017-04-14
1. 解Bug：处理出错字符串时断言

2017-04-13
1. 查内存泄漏问题：解决字符串转换拼接、字符串比较场景产生的内存泄漏
下一步计划：了解Generate功能

2017-04-11
1. 查内存泄漏问题：现象：当dkm文件有编译错误时，无法重复编译dkm文件。
   第二次编译dkm文件时，在检查内存处抛出异常。
   经检查，发现函数Error::CompileError的vStrMessage变量在FormatMessage后，
   其在Memory类中申请的内存没有被释放所致。
下一步计划：了解Generate功能

2017-04-10
1. 实现FixTree类
2. 搭建从脚本文件读取脚本文本并进行编译的一系列流程，并经过自测
下一步计划：了解Generate功能

2017-04-07
1. 实现FixTree类
下一步计划：继续实现FixTree类

2017-04-06
1. 实现Storage释放，能够连续运行脚本，并做内存性能测试
2. 实现FixTree类
下一步计划：实现修复分析树

2017-04-03
1. 实现了多线程编译功能，并进行了单元测试
下一步计划：实现修复分析树

2017-03-30
1. 调试这个完整的过程，通过测试文件测试是否创建了对应的CompilerInterpreter数据结构
下一步计划：修复分析树

2017-03-30
1. 实现Create类
2. 将词法分析器、语法分析器加入编译，并解决编译问题
下一步计划：调试这个完整的过程，通过测试文件测试是否创建了对应的CompilerInterpreter数据结构

2017-03-29
1. 实现Create类
下一步计划：实现将词法分析、语法分析加入进来并编译通过

2017-03-28
1. 实现StringLiteral类并进行了单元测试、Create类
下一步计划：实现Create类

2017-03-27
1. 实现Error类并进行了单元测试
下一步计划：实现String类

2017-03-24
1. 实现Error类中的部分函数功能
下一步计划：实现Error类并进行单元测试

2017-03-24
1. 在Error类中增加错误码信息
下一步计划：实现Error类并进行单元测试

2017-03-23
1. 实现Util类，并进行了单元测试
下一步计划：实现Error类

2017-03-23
1. 删除不必要的宏
2. 创建Util类，建立其与Storage类之间的关系，并将其纳入DikSam中
下一步计划：实现Util类

2017-03-22
1. 实现Storage类，用于存储管理
2. 实现DikSam类的多实例，通过全局变量切换对象
下一步计划：实现Util类

2017-03-21
1. 实现并调试Memory类
下一步计划：实现Storage类，用于存储管理

2017-03-21
1. 在类Debug中增加Assert功能
下一步计划：实现Memory类，用于存储管理

2017-03-20
1. 增加了基本的数据结构
2. 实现Debug类的可变参数打印
3. 增加一个基本的框架，用来使用Debug

2017-03-17
1. 对改成C++类进行了评估，放弃
2. 添加必要的头文件，没有实现其内容，先保证所依赖的文件都存在
下一步计划：在这些头文件中实现必要的数据类型定义，目标是能够编译输出一个完整的程序。

2017-03-15
1. 创建GitHub库

2017-03-03
1. 创建DiskSam的VS2013工程
下一步计划：重写Debug模块，改为C++类

2017-03-02
1. 完成词法分析器剩余部分编码，并将.l .y文件加入MakeFile
下一步计划：分析.y文件

2017-03-01
1. 完成词法分析器部分编码
下一步计划：看懂例子里词法分析器剩余部分编码并临摹。
            将.l文件加入MakeFile

2017-02-28
1. 搭建一个基本的编译框架，包含Crowbar第四版的Debug和Memory库
下一步计划：将词法分析器添加进来，实现基本的词法分析。